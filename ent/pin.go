// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DeedleFake/sips/ent/pin"
	"github.com/DeedleFake/sips/ent/user"
)

// Pin is the model entity for the Pin schema.
type Pin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "Status" field.
	Status pin.Status `json:"Status,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Origins holds the value of the "Origins" field.
	Origins []string `json:"Origins,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PinQuery when eager-loading is set.
	Edges     PinEdges `json:"edges"`
	user_pins *int
}

// PinEdges holds the relations/edges for other nodes in the graph.
type PinEdges struct {
	// User holds the value of the User edge.
	User *User `json:"User,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PinEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pin.FieldOrigins:
			values[i] = new([]byte)
		case pin.FieldID:
			values[i] = new(sql.NullInt64)
		case pin.FieldStatus, pin.FieldName:
			values[i] = new(sql.NullString)
		case pin.FieldCreateTime, pin.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case pin.ForeignKeys[0]: // user_pins
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Pin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pin fields.
func (pi *Pin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case pin.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pi.CreateTime = value.Time
			}
		case pin.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pi.UpdateTime = value.Time
			}
		case pin.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				pi.Status = pin.Status(value.String)
			}
		case pin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case pin.FieldOrigins:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Origins", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pi.Origins); err != nil {
					return fmt.Errorf("unmarshal field Origins: %w", err)
				}
			}
		case pin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_pins", value)
			} else if value.Valid {
				pi.user_pins = new(int)
				*pi.user_pins = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "User" edge of the Pin entity.
func (pi *Pin) QueryUser() *UserQuery {
	return (&PinClient{config: pi.config}).QueryUser(pi)
}

// Update returns a builder for updating this Pin.
// Note that you need to call Pin.Unwrap() before calling this method if this Pin
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Pin) Update() *PinUpdateOne {
	return (&PinClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Pin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Pin) Unwrap() *Pin {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pin is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Pin) String() string {
	var builder strings.Builder
	builder.WriteString("Pin(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", Status=")
	builder.WriteString(fmt.Sprintf("%v", pi.Status))
	builder.WriteString(", Name=")
	builder.WriteString(pi.Name)
	builder.WriteString(", Origins=")
	builder.WriteString(fmt.Sprintf("%v", pi.Origins))
	builder.WriteByte(')')
	return builder.String()
}

// Pins is a parsable slice of Pin.
type Pins []*Pin

func (pi Pins) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
