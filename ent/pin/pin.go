// Code generated by ent, DO NOT EDIT.

package pin

import (
	"fmt"
	"time"

	"github.com/DeedleFake/sips"
)

const (
	// Label holds the string label denoting the pin type in the database.
	Label = "pin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCID holds the string denoting the cid field in the database.
	FieldCID = "cid"
	// FieldOrigins holds the string denoting the origins field in the database.
	FieldOrigins = "origins"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// Table holds the table name of the pin in the database.
	Table = "pins"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "pins"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "user_pins"
)

// Columns holds all SQL columns for pin fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldName,
	FieldCID,
	FieldOrigins,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pins"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_pins",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CIDValidator is a validator for the "CID" field. It is called by the builders before save.
	CIDValidator func(string) error
)

const DefaultStatus sips.RequestStatus = "queued"

// StatusValidator is a validator for the "Status" field enum values. It is called by the builders before save.
func StatusValidator(_status sips.RequestStatus) error {
	switch _status {
	case "queued", "pinning", "pinned", "failed":
		return nil
	default:
		return fmt.Errorf("pin: invalid enum value for Status field: %q", _status)
	}
}
