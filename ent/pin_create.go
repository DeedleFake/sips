// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DeedleFake/sips"
	"github.com/DeedleFake/sips/ent/pin"
	"github.com/DeedleFake/sips/ent/user"
)

// PinCreate is the builder for creating a Pin entity.
type PinCreate struct {
	config
	mutation *PinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (pc *PinCreate) SetCreateTime(t time.Time) *PinCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PinCreate) SetNillableCreateTime(t *time.Time) *PinCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PinCreate) SetUpdateTime(t time.Time) *PinCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PinCreate) SetNillableUpdateTime(t *time.Time) *PinCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetStatus sets the "Status" field.
func (pc *PinCreate) SetStatus(ss sips.RequestStatus) *PinCreate {
	pc.mutation.SetStatus(ss)
	return pc
}

// SetName sets the "Name" field.
func (pc *PinCreate) SetName(s string) *PinCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetOrigins sets the "Origins" field.
func (pc *PinCreate) SetOrigins(s []string) *PinCreate {
	pc.mutation.SetOrigins(s)
	return pc
}

// SetUserID sets the "User" edge to the User entity by ID.
func (pc *PinCreate) SetUserID(id int) *PinCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the "User" edge to the User entity by ID if the given value is not nil.
func (pc *PinCreate) SetNillableUserID(id *int) *PinCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the "User" edge to the User entity.
func (pc *PinCreate) SetUser(u *User) *PinCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PinMutation object of the builder.
func (pc *PinCreate) Mutation() *PinMutation {
	return pc.mutation
}

// Save creates the Pin in the database.
func (pc *PinCreate) Save(ctx context.Context) (*Pin, error) {
	var (
		err  error
		node *Pin
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PinCreate) SaveX(ctx context.Context) *Pin {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PinCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PinCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PinCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := pin.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := pin.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PinCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "Status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := pin.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "Status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := pin.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Name": %w`, err)}
		}
	}
	return nil
}

func (pc *PinCreate) sqlSave(ctx context.Context) (*Pin, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PinCreate) createSpec() (*Pin, *sqlgraph.CreateSpec) {
	var (
		_node = &Pin{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pin.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pin.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pin.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pin.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pin.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Origins(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: pin.FieldOrigins,
		})
		_node.Origins = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pin.UserTable,
			Columns: []string{pin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_pins = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pin.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PinUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PinCreate) OnConflict(opts ...sql.ConflictOption) *PinUpsertOne {
	pc.conflict = opts
	return &PinUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PinCreate) OnConflictColumns(columns ...string) *PinUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PinUpsertOne{
		create: pc,
	}
}

type (
	// PinUpsertOne is the builder for "upsert"-ing
	//  one Pin node.
	PinUpsertOne struct {
		create *PinCreate
	}

	// PinUpsert is the "OnConflict" setter.
	PinUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *PinUpsert) SetCreateTime(v time.Time) *PinUpsert {
	u.Set(pin.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PinUpsert) UpdateCreateTime() *PinUpsert {
	u.SetExcluded(pin.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PinUpsert) SetUpdateTime(v time.Time) *PinUpsert {
	u.Set(pin.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PinUpsert) UpdateUpdateTime() *PinUpsert {
	u.SetExcluded(pin.FieldUpdateTime)
	return u
}

// SetStatus sets the "Status" field.
func (u *PinUpsert) SetStatus(v sips.RequestStatus) *PinUpsert {
	u.Set(pin.FieldStatus, v)
	return u
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *PinUpsert) UpdateStatus() *PinUpsert {
	u.SetExcluded(pin.FieldStatus)
	return u
}

// SetName sets the "Name" field.
func (u *PinUpsert) SetName(v string) *PinUpsert {
	u.Set(pin.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *PinUpsert) UpdateName() *PinUpsert {
	u.SetExcluded(pin.FieldName)
	return u
}

// SetOrigins sets the "Origins" field.
func (u *PinUpsert) SetOrigins(v []string) *PinUpsert {
	u.Set(pin.FieldOrigins, v)
	return u
}

// UpdateOrigins sets the "Origins" field to the value that was provided on create.
func (u *PinUpsert) UpdateOrigins() *PinUpsert {
	u.SetExcluded(pin.FieldOrigins)
	return u
}

// ClearOrigins clears the value of the "Origins" field.
func (u *PinUpsert) ClearOrigins() *PinUpsert {
	u.SetNull(pin.FieldOrigins)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PinUpsertOne) UpdateNewValues() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Pin.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PinUpsertOne) Ignore() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PinUpsertOne) DoNothing() *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PinCreate.OnConflict
// documentation for more info.
func (u *PinUpsertOne) Update(set func(*PinUpsert)) *PinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *PinUpsertOne) SetCreateTime(v time.Time) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateCreateTime() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PinUpsertOne) SetUpdateTime(v time.Time) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateUpdateTime() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "Status" field.
func (u *PinUpsertOne) SetStatus(v sips.RequestStatus) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateStatus() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "Name" field.
func (u *PinUpsertOne) SetName(v string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateName() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateName()
	})
}

// SetOrigins sets the "Origins" field.
func (u *PinUpsertOne) SetOrigins(v []string) *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.SetOrigins(v)
	})
}

// UpdateOrigins sets the "Origins" field to the value that was provided on create.
func (u *PinUpsertOne) UpdateOrigins() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.UpdateOrigins()
	})
}

// ClearOrigins clears the value of the "Origins" field.
func (u *PinUpsertOne) ClearOrigins() *PinUpsertOne {
	return u.Update(func(s *PinUpsert) {
		s.ClearOrigins()
	})
}

// Exec executes the query.
func (u *PinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PinUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PinUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PinCreateBulk is the builder for creating many Pin entities in bulk.
type PinCreateBulk struct {
	config
	builders []*PinCreate
	conflict []sql.ConflictOption
}

// Save creates the Pin entities in the database.
func (pcb *PinCreateBulk) Save(ctx context.Context) ([]*Pin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pin, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PinCreateBulk) SaveX(ctx context.Context) []*Pin {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PinCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PinCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PinUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PinCreateBulk) OnConflict(opts ...sql.ConflictOption) *PinUpsertBulk {
	pcb.conflict = opts
	return &PinUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PinCreateBulk) OnConflictColumns(columns ...string) *PinUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PinUpsertBulk{
		create: pcb,
	}
}

// PinUpsertBulk is the builder for "upsert"-ing
// a bulk of Pin nodes.
type PinUpsertBulk struct {
	create *PinCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PinUpsertBulk) UpdateNewValues() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PinUpsertBulk) Ignore() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PinUpsertBulk) DoNothing() *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PinCreateBulk.OnConflict
// documentation for more info.
func (u *PinUpsertBulk) Update(set func(*PinUpsert)) *PinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *PinUpsertBulk) SetCreateTime(v time.Time) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateCreateTime() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *PinUpsertBulk) SetUpdateTime(v time.Time) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateUpdateTime() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "Status" field.
func (u *PinUpsertBulk) SetStatus(v sips.RequestStatus) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateStatus() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "Name" field.
func (u *PinUpsertBulk) SetName(v string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateName() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateName()
	})
}

// SetOrigins sets the "Origins" field.
func (u *PinUpsertBulk) SetOrigins(v []string) *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.SetOrigins(v)
	})
}

// UpdateOrigins sets the "Origins" field to the value that was provided on create.
func (u *PinUpsertBulk) UpdateOrigins() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.UpdateOrigins()
	})
}

// ClearOrigins clears the value of the "Origins" field.
func (u *PinUpsertBulk) ClearOrigins() *PinUpsertBulk {
	return u.Update(func(s *PinUpsert) {
		s.ClearOrigins()
	})
}

// Exec executes the query.
func (u *PinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
