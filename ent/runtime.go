// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/DeedleFake/sips/db/schema"
	"github.com/DeedleFake/sips/ent/pin"
	"github.com/DeedleFake/sips/ent/token"
	"github.com/DeedleFake/sips/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	pinMixin := schema.Pin{}.Mixin()
	pinMixinFields0 := pinMixin[0].Fields()
	_ = pinMixinFields0
	pinFields := schema.Pin{}.Fields()
	_ = pinFields
	// pinDescCreateTime is the schema descriptor for create_time field.
	pinDescCreateTime := pinMixinFields0[0].Descriptor()
	// pin.DefaultCreateTime holds the default value on creation for the create_time field.
	pin.DefaultCreateTime = pinDescCreateTime.Default.(func() time.Time)
	// pinDescUpdateTime is the schema descriptor for update_time field.
	pinDescUpdateTime := pinMixinFields0[1].Descriptor()
	// pin.DefaultUpdateTime holds the default value on creation for the update_time field.
	pin.DefaultUpdateTime = pinDescUpdateTime.Default.(func() time.Time)
	// pin.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	pin.UpdateDefaultUpdateTime = pinDescUpdateTime.UpdateDefault.(func() time.Time)
	// pinDescName is the schema descriptor for Name field.
	pinDescName := pinFields[1].Descriptor()
	// pin.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	pin.NameValidator = pinDescName.Validators[0].(func(string) error)
	// pinDescCID is the schema descriptor for CID field.
	pinDescCID := pinFields[2].Descriptor()
	// pin.CIDValidator is a validator for the "CID" field. It is called by the builders before save.
	pin.CIDValidator = pinDescCID.Validators[0].(func(string) error)
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreateTime is the schema descriptor for create_time field.
	tokenDescCreateTime := tokenMixinFields0[0].Descriptor()
	// token.DefaultCreateTime holds the default value on creation for the create_time field.
	token.DefaultCreateTime = tokenDescCreateTime.Default.(func() time.Time)
	// tokenDescUpdateTime is the schema descriptor for update_time field.
	tokenDescUpdateTime := tokenMixinFields0[1].Descriptor()
	// token.DefaultUpdateTime holds the default value on creation for the update_time field.
	token.DefaultUpdateTime = tokenDescUpdateTime.Default.(func() time.Time)
	// token.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	token.UpdateDefaultUpdateTime = tokenDescUpdateTime.UpdateDefault.(func() time.Time)
	// tokenDescToken is the schema descriptor for Token field.
	tokenDescToken := tokenFields[0].Descriptor()
	// token.TokenValidator is a validator for the "Token" field. It is called by the builders before save.
	token.TokenValidator = tokenDescToken.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for Name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
}
